@startuml Batch Lifecycle
title Batch Lifecycle

hide footbox
participant main
participant BatchApplication
participant JobScheduler
participant JobLauncher
participant StepLauncher
participant TaskLauncher
participant Job
participant Step
participant Task
participant Repository

activate main

group Initialize Required Instances
    create Job
    main -> Job: new
    activate Job
    create Step
    main -> Step: new
    activate Step

    create Task
    main -> Task: new
    activate Task

    create BatchApplication
    main -> BatchApplication: new
    activate BatchApplication
    create Repository
    BatchApplication -> Repository: create singleton instance on load
    activate Repository
end

group Register Jobs and Parameters
    BatchApplication -> Job: addJob
    note over Job: Required before run batch application

    Job -> Step: addStep
    note over Step: Required before run batch application

    Step -> Task: addTask
    note over Task: Required before run batch application

    BatchApplication -> Repository: addSharedParameter
    note over Repository: Optional and this parameter will be shared all layers
end


group Framework Lifecycle
    main -> BatchApplication: run

    group Schedule Registered Jobs
        create JobScheduler
        BatchApplication -> JobScheduler: new
        activate JobScheduler

        BatchApplication -> JobScheduler: run
        note over JobScheduler
            Thereafter, the comparison of the current time
            and the scheduled time is repeated
        end note
    end

    loop Infinite Loop
        opt Now == Scheduled Time
            group Job Execution
                create JobLauncher
                JobScheduler -> JobLauncher: new
                JobLauncher -> Job: get
                JobLauncher <-- Job: Job's instance

                opt JobPrecondition == true
                    JobScheduler -> JobLauncher: run

                    activate JobLauncher

                    group Step Execution
                        create StepLauncher
                        JobLauncher -> StepLauncher: new
                        StepLauncher -> Step: get
                        StepLauncher <-- Step: Step's instance

                        opt StepPrecondition == true
                            JobLauncher -> StepLauncher: run
                            activate StepLauncher

                            group Task Execution
                                create TaskLauncher
                                StepLauncher -> TaskLauncher: new
                                TaskLauncher -> Task: get
                                TaskLauncher <-- Task: Task's instance

                                opt TaskPrecondition == true
                                    StepLauncher -> TaskLauncher: run
                                    activate TaskLauncher
                                    TaskLauncher -> Task: execute
                                    activate Task
                                    TaskLauncher <-- Task
                                    deactivate Task
                                end

                                opt TaskHasBranch == true
                                    TaskLauncher -> TaskLauncher: run
                                    note over TaskLauncher: Execute all task branches recursively
                                end
                                                                                                    StepLauncher <-- TaskLauncher
                                deactivate TaskLauncher
                                destroy TaskLauncher
                            end
                        end

                        opt StepHadBranch == true
                            StepLauncher -> StepLauncher: run
                            note over StepLauncher: Execute all step branches recursively
                        end

                        JobLauncher <-- StepLauncher
                        deactivate StepLauncher
                        destroy StepLauncher
                    end
                end

                opt JobHasBranch == true
                    JobLauncher -> JobLauncher: run
                    note over JobLauncher: Execute all job branches recursively
                end

                JobScheduler <-- JobLauncher
                deactivate JobLauncher
                destroy JobLauncher
            end
        end
    end
end
@enduml
