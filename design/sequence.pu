@startuml Batch Lifecycle
title Batch Lifecycle

hide footbox
participant main
participant Repository
participant Logger
participant BatchApplication
participant JobScheduler
participant JobLauncher
participant StepLauncher
participant TaskLauncher
participant Job
participant Step
participant Task

activate main

group Initialize Required Instances
    create Job
    main -> Job: new with unique name and schedule
    activate Job
    create Step
    main -> Step: New with unique name
    activate Step

    create Task
    main -> Task: New
    activate Task

    create BatchApplication
    main -> BatchApplication: New with configuration
    activate BatchApplication

    create Repository
    BatchApplication -> Repository: Create singleton instance on load
    activate Repository
end

group Register Jobs and Parameters
    main -> Step: Call addTask with Task instance as a parameter
    note over main, Task: Add Task objects tied to the Step object
    main <-- Step

    main -> Job: Call addStep with Step instance as a parameter
    note over main, Step: Add Step objects tied to the Job object
    main <-- Job

    main -> BatchApplication: Call addJob with Job instance as a parameter
    note over main, Job: Add Job objects on root
    main <-- BatchApplication

    main -> Repository: addSharedParameter
    note over main, Repository: Optional and this parameter will be shared all layers
    main <-- Repository
end

group Framework Lifecycle
    main -> BatchApplication: Run

    create Logger
    BatchApplication -> Logger: Load Logger
    activate Logger

    group Schedule And Executions
        create JobScheduler
        BatchApplication -> JobScheduler: New
        activate JobScheduler

        BatchApplication -> JobScheduler: Run
        note over JobScheduler
            Thereafter, the comparison of the current time
            and the scheduled time is repeated
        end note

        loop Infinite Loop
            opt Now == Scheduled Time
                group Job Execution
                    create JobLauncher
                    JobScheduler -> JobLauncher: New
                    JobLauncher -> Job: Get Job's instance
                    JobLauncher <-- Job: Job's instance

                    opt JobPrecondition == true
                        JobScheduler -> JobLauncher: Run

                        activate JobLauncher

                        group Step Execution
                            create StepLauncher
                            JobLauncher -> StepLauncher: New
                            StepLauncher -> Step: Get Step's instance
                            StepLauncher <-- Step: Step's instance

                            opt StepPrecondition == true
                                JobLauncher -> StepLauncher: Run
                                activate StepLauncher

                                group Task Execution
                                    create TaskLauncher
                                    StepLauncher -> TaskLauncher: New
                                    TaskLauncher -> Task: get Task's instance
                                    TaskLauncher <-- Task: Task's instance

                                    opt TaskPrecondition == true
                                        StepLauncher -> TaskLauncher: Run
                                        activate TaskLauncher
                                        TaskLauncher -> Task: Execute Task
                                        activate Task
                                        TaskLauncher <-- Task
                                        deactivate Task
                                    end

                                    opt TaskHasBranch == true
                                        TaskLauncher -> TaskLauncher: Run
                                        note over TaskLauncher: Execute all task branches recursively
                                    end
                                                                                                        StepLauncher <-- TaskLauncher
                                    deactivate TaskLauncher
                                    destroy TaskLauncher
                                end
                            end

                            opt StepHadBranch == true
                                StepLauncher -> StepLauncher: Run
                                note over StepLauncher: Execute all step branches recursively
                            end

                            JobLauncher <-- StepLauncher
                            deactivate StepLauncher
                            destroy StepLauncher
                        end
                    end

                    opt JobHasBranch == true
                        JobLauncher -> JobLauncher: Run
                        note over JobLauncher: Execute all job branches recursively
                    end

                    JobScheduler <-- JobLauncher
                    deactivate JobLauncher
                    destroy JobLauncher
                end
            end
        end
    end
end
@enduml
